// <auto-generated />
using System;
using FilmLibrary.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FilmLibrary.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FilmLibrary.Models.Actor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("FilmLibrary.Models.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("FilmLibrary.Models.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Actors");

                    b.Property<string>("Director");

                    b.Property<string>("ImdbId");

                    b.Property<string>("Plot");

                    b.Property<string>("Poster");

                    b.Property<string>("Production");

                    b.Property<string>("Rating");

                    b.Property<string>("Released");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("FilmLibrary.Models.MovieActor", b =>
                {
                    b.Property<Guid>("MovieId");

                    b.Property<Guid>("ActorId");

                    b.HasKey("MovieId", "ActorId");

                    b.HasAlternateKey("ActorId", "MovieId");

                    b.ToTable("Movies_Actors");
                });

            modelBuilder.Entity("FilmLibrary.Models.MovieGenre", b =>
                {
                    b.Property<Guid>("MovieId");

                    b.Property<Guid>("GenreId");

                    b.HasKey("MovieId", "GenreId");

                    b.HasAlternateKey("GenreId", "MovieId");

                    b.ToTable("Movies_Genres");
                });

            modelBuilder.Entity("FilmLibrary.Models.MovieProduction", b =>
                {
                    b.Property<Guid>("MovieId");

                    b.Property<Guid>("ProductionId");

                    b.HasKey("MovieId", "ProductionId");

                    b.HasIndex("ProductionId");

                    b.ToTable("Movies_Productions");
                });

            modelBuilder.Entity("FilmLibrary.Models.Production", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Productions");
                });

            modelBuilder.Entity("FilmLibrary.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FilmLibrary.Models.UserMovie", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("MovieId");

                    b.Property<string>("Category");

                    b.HasKey("UserId", "MovieId", "Category");

                    b.HasAlternateKey("Category", "MovieId", "UserId");

                    b.HasIndex("MovieId");

                    b.ToTable("Users_Movies");
                });

            modelBuilder.Entity("FilmLibrary.Models.MovieActor", b =>
                {
                    b.HasOne("FilmLibrary.Models.Actor", "Actor")
                        .WithMany()
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FilmLibrary.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FilmLibrary.Models.MovieGenre", b =>
                {
                    b.HasOne("FilmLibrary.Models.Genre", "Genre")
                        .WithMany("Movies")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FilmLibrary.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FilmLibrary.Models.MovieProduction", b =>
                {
                    b.HasOne("FilmLibrary.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FilmLibrary.Models.Production", "Production")
                        .WithMany()
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FilmLibrary.Models.UserMovie", b =>
                {
                    b.HasOne("FilmLibrary.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FilmLibrary.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
